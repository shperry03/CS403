This program is designed to interpret and execute one or more LISP-syntax text files, 
outputting the results to the command line. 

Creating test files:
To generate test files, the user must simply create a new .txt file in the same directory as 
the program, with correct LISP syntax. For example, the entire file must be enclosed with ( ).
After the first opening ( is closed, the file will stop execution. 
The program is not designed to handle LISP code with errors. 

Adding new test files:
The execution of each existing test file is found at the bottom of the script.
The program can be easily updated with new test cases using the following steps. 
The steps to execute a new LISP file are as follows:

1. Create a new variable (var1) and set it equal to readFile('Testfilename.txt').
The readFile() function reads a text file and returns it in string form, to be read later.

2. Create another variable (var2) and set it equal to parser(var1).
Calling the parser() function on a LISP string tokenizes the file based on '(' ')' characters.
It then takes the tokenized string and converts it to a Python list format for further parsing.

3. Call evaluateAll(var2).
Calling evaluateAll() on the tokenized list of commands performs the eval() function 
iteratively on each item in the list of tokens. The eval() function executes LISP
commands recursively using the environment library and if/else statements which are 
selected based on the LISP operator and arguments passed in.

*** NOTE: Output of LISP commands will not be printed to the terminal unless PRINT is called ***

Compiling and Running:
This program runs on Python version 3.X, and can be simply run on any machine with Python
and an interpreter installed using the terminal command "python3 LispInterpreter.py"
